{"version":3,"sources":["../../src/endpoints/helpers.ts"],"names":["createHDmasterKey","key","masterKey","Wallet","HDKey","parseMasterSeed","extendedPrivateKey","derive","childKey","parseExtendedKey","wallet","walletPrivateKey","privateKey","walletPublicKey","publicKey","createMnemonic","mnemonic","Mnemonic","generate","phrase","seed","toSeed","getETHAddress","address","EthereumAddress","from","getHDmasterKeyFromMnemonic","parse","Error"],"mappings":"uLAAA,8BACA,yD,kFAEO,KAAMA,CAAAA,iBAAiB,CAAIC,GAAD,EAAiB,CAChD,KAAMC,CAAAA,SAAS,CAAGC,gBAAOC,KAAP,CAAaC,eAAb,CAA6BJ,GAA7B,CAAlB,CACA,KAAMK,CAAAA,kBAAkB,CAAGJ,SAAS,CAACK,MAAV,CAAiB,gBAAjB,EACxBD,kBADH,CAEA,KAAME,CAAAA,QAAQ,CAAGL,gBAAOC,KAAP,CAAaK,gBAAb,CAA8BH,kBAA9B,CAAjB,CACA,KAAMI,CAAAA,MAAM,CAAGF,QAAQ,CAACD,MAAT,CAAgB,GAAhB,CAAf,CACA,KAAMI,CAAAA,gBAAgB,CAAGD,MAAM,CAACE,UAAhC,CACA,KAAMC,CAAAA,eAAe,CAAGH,MAAM,CAACI,SAA/B,CAEA,MAAO,CAAEA,SAAS,CAAED,eAAb,CAA8BD,UAAU,CAAED,gBAA1C,CACR,CAVM,C,4CAYA,KAAMI,CAAAA,cAAc,CAAG,IAAM,CAClC,KAAMC,CAAAA,QAAQ,CAAGb,gBAAOc,QAAP,CAAgBC,QAAhB,CAAyB,wBAAY,EAAZ,CAAzB,CAAjB,CACA,KAAMC,CAAAA,MAAM,CAAGH,QAAQ,CAACG,MAAxB,CACA,KAAMC,CAAAA,IAAY,CAAGJ,QAAQ,CAACK,MAAT,EAArB,CAEA,MAAO,CAAEF,MAAF,CAAUC,IAAV,CACR,CANM,C,sCAQA,KAAME,CAAAA,aAAa,CAAIrB,GAAD,EAAiB,CAC5C,KAAMsB,CAAAA,OAAO,CAAGpB,gBAAOqB,eAAP,CAAuBC,IAAvB,CAA4BxB,GAA5B,EAAiCsB,OAAjD,CAEA,MAAOA,CAAAA,OACR,CAJM,C,oCAMA,KAAMG,CAAAA,0BAA0B,CAAIP,MAAD,EAAoB,CAC5D,KAAMH,CAAAA,QAAQ,CAAGb,gBAAOc,QAAP,CAAgBU,KAAhB,CAAsBR,MAAtB,CAAjB,CACA,GAAI,CAACH,QAAL,CAAe,CACb,KAAM,IAAIY,CAAAA,KAAJ,CAAU,iCAAV,CACP,CACD,KAAMR,CAAAA,IAAI,CAAGJ,QAAQ,CAACK,MAAT,EAAb,CAEA,MAAOrB,CAAAA,iBAAiB,CAACoB,IAAD,CACzB,CARM,C","sourcesContent":["import { randomBytes } from \"crypto\";\nimport Wallet from \"wallet.ts\";\n\nexport const createHDmasterKey = (key: Buffer) => {\n  const masterKey = Wallet.HDKey.parseMasterSeed(key);\n  const extendedPrivateKey = masterKey.derive(\"m/44'/60'/0'/0\")\n    .extendedPrivateKey;\n  const childKey = Wallet.HDKey.parseExtendedKey(extendedPrivateKey as string);\n  const wallet = childKey.derive(\"0\");\n  const walletPrivateKey = wallet.privateKey;\n  const walletPublicKey = wallet.publicKey;\n\n  return { publicKey: walletPublicKey, privateKey: walletPrivateKey };\n};\n\nexport const createMnemonic = () => {\n  const mnemonic = Wallet.Mnemonic.generate(randomBytes(32));\n  const phrase = mnemonic.phrase;\n  const seed: Buffer = mnemonic.toSeed();\n\n  return { phrase, seed };\n};\n\nexport const getETHAddress = (key: Buffer) => {\n  const address = Wallet.EthereumAddress.from(key).address;\n\n  return address;\n};\n\nexport const getHDmasterKeyFromMnemonic = (phrase: string) => {\n  const mnemonic = Wallet.Mnemonic.parse(phrase);\n  if (!mnemonic) {\n    throw new Error(\"Mnemonic phrase is not correct.\");\n  }\n  const seed = mnemonic.toSeed();\n\n  return createHDmasterKey(seed);\n};\n"],"file":"helpers.js"}